package security.crypto.keys;

/**
 * 
 * Network and Computer Systems Security
 * 
 * Practical Lab #1.
 * 
 * Integrated Master of Computer Science and Engineering
 * Faculty of Science and Technology of New University of Lisbon
 * 
 * Authors (Professors):
 * @author Henrique Joao Domingos - hj@fct.unl.pt
 * 
 * Adapted by:
 * @author Ruben Andre Barreiro - r.barreiro@campus.fct.unl.pt
 * @author Vicente Alves Almeida - vo.almeida@campus.fct.unl.pt
 *
 */

import java.io.*;
import javax.crypto.*;

/**
 * Class for the Key Generator Utils.
 * 
 * Description:
 * - A class responsible for hte generation of Secret Keys and its save/write process of the,
 *   previously, generated Secret Key;
 *   
 * NOTE:
 * 1) Could be used another many parameters for the initialisation of
 *    Security/Crypto Algorithm to be used in, the generation of the Secret Keys;
 * 2) The length/size of the Secret Keys, must be correct, to be used for,
 *    the many Security/Crypto Symmetric Algorithms;
 */
public class KeyGeneratorUtils {
	
	// Invariants/Constraints:

	/**
	 * The Security/Crypto Algorithm to be used in the generation of Secret Keys
	 */
	// The AES Algorithm (Advanced Encryption Standard - Rijndael)
	public static final String ALGORITHM = "AES";
	
	// DESede Algorithm (3DES [Triple Data Encryption Standard] - Encryption-De-encryption-Encryption)
	// public static final String ALGORITHM = "DESede";
	
	// Blowfish Algorithm
	// public static final String ALGORITHM = "Blowfish";
	
	/**
	 * The size of the Secret Keys to be generated
	 */
	public static final Integer KEYSIZE = 256;

	// public static final Integer KEYSIZE = 168;

	// public static final Integer KEYSIZE = 448;

	/**
	 * The name of the file, to save/write the Secret Keys generated 
	 */
	public static final String KEYRING = "keyring";

	
	/**
	 * The main method. The method responsible for the generation and save/write process of the,
	 * previously, generated Secret Key
	 * 
	 * @param args no arguments
	 *
	 * @throws Exception an Exception to be thrown at process of save/write any generated Secret Keys
	 */
	public static void main(String[] args) throws Exception {

		// The generation of a pretended Secret Key,
		// using the Security/Crypto Algorithm defined previously
		KeyGenerator keyGenerator = KeyGenerator.getInstance(ALGORITHM);
		keyGenerator.init(KEYSIZE);
		
		// The Secret Key generated by the key Generator
		SecretKey secretKey = keyGenerator.generateKey();

		// The Output Stream to the file, to save/write the Secret Keys generated
		OutputStream outputStream = new FileOutputStream(KEYRING);
		
		try {
			// Save/Write the Secret Key, previously created, in the Key Storage
			outputStream.write(secretKey.getEncoded());
			
			// Just for debug of the save process, in the Key Storage,
			// of the Secret Key, previously created
			System.out.println("----------------------------------------------");
			System.out.println("Secret Key generated, using the Security/Crypto Algortihm: [" + ALGORITHM + " with " + KEYSIZE + " bits of size];");
			System.out.println("Secret Key saved on the Key Storage: [" + KEYRING + "];"); 
			System.out.println("----------------------------------------------");
		} 
		finally {
			try {
				outputStream.close();
			}
			catch (Exception e) {
				// Handle of Exceptions in the process of Write Secret Key and then,
				// the closing of the Output Stream, previously created
    			System.err.print("Error on the process of Write Secret Key and then, " 
				                  + "the closing of the Output Stream, previously created");
			} 
    	} 
	} 
}